"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CountDown = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CountDownClass {
  constructor() {
    _defineProperty(this, "timer", void 0);

    _defineProperty(this, "interval", void 0);

    _defineProperty(this, "onTimerEnd", void 0);

    _defineProperty(this, "onTimerChange", void 0);

    this.timer = 0;
    this.setDefaultTimerCallback();
  }

  floorDuration(duration) {
    return duration >= 0 ? Math.floor(duration * 0.001) * 1000 : 0;
  }

  startTimer() {
    const that = this;
    this.interval = setInterval(function () {
      that.handleOnTimerChange(that.timer);

      if (that.timer <= 0) {
        that.clearInterval();
        that.handleOnTimerEnd();
      } else {
        that.timer -= 1000;
      }
    }, 1000);
  }

  clearInterval() {
    this.interval && clearInterval(this.interval);
  }

  handleOnTimerEnd() {
    var _this$onTimerEnd, _this$onTimerEnd2;

    ((_this$onTimerEnd = this.onTimerEnd) === null || _this$onTimerEnd === void 0 ? void 0 : _this$onTimerEnd.length) !== 0 && ((_this$onTimerEnd2 = this.onTimerEnd) === null || _this$onTimerEnd2 === void 0 ? void 0 : _this$onTimerEnd2.forEach(callback => callback()));
    this.setDefaultTimerCallback();
  }

  handleOnTimerChange(timer) {
    var _this$onTimerChange, _this$onTimerChange2;

    ((_this$onTimerChange = this.onTimerChange) === null || _this$onTimerChange === void 0 ? void 0 : _this$onTimerChange.length) !== 0 && ((_this$onTimerChange2 = this.onTimerChange) === null || _this$onTimerChange2 === void 0 ? void 0 : _this$onTimerChange2.forEach(callback => callback(timer)));
  }

  setDefaultTimerCallback() {
    this.onTimerEnd = [];
    this.onTimerChange = [];
  }

  setTimer(duration) {
    this.clearInterval();
    this.timer = this.floorDuration(duration);
    this.startTimer();
  }

  getTimer(onTimerChange) {
    var _this$onTimerChange3;

    (_this$onTimerChange3 = this.onTimerChange) === null || _this$onTimerChange3 === void 0 ? void 0 : _this$onTimerChange3.push(onTimerChange);
  }

  getTimerOnEnd(onTimerEnd) {
    var _this$onTimerEnd3;

    (_this$onTimerEnd3 = this.onTimerEnd) === null || _this$onTimerEnd3 === void 0 ? void 0 : _this$onTimerEnd3.push(onTimerEnd);
  }

  resetTimer() {
    this.clearInterval();
    this.setDefaultTimerCallback();
    this.timer = 0;
  }

}

const CountDown = new CountDownClass();
exports.CountDown = CountDown;
//# sourceMappingURL=CountDown.js.map